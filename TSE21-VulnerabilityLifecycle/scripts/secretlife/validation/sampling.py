import json
import os

import pandas as pd

enriched_filepath = "../../../data/repos_enriched.json"

cve_vcc_pairs_population_filepath = "../../../data/validation/cve_vcc_pairs_population.csv"
cve_vcc_pairs_sample_filepath = "../../../data/validation/cve_vcc_pairs_sample.csv"

fix_cve_pairs_population_filepath = "../../../data/validation/fix_cve_pairs_population.csv"
fix_cve_pairs_sample_filepath = "../../../data/validation/fix_cve_pairs_sample.csv"

nvd_base_url = "https://nvd.nist.gov/vuln/detail"

enriched_repos = []
with open(enriched_filepath, "r") as in_file:
    enriched_repos = json.load(in_file)

# Make Population for the Validation
cve_vcc_pairs = []
for er in enriched_repos:
    repo_url = er["repo"]
    org_name = repo_url.rsplit('/', 2)[1]
    project_name = repo_url.rsplit('/', 2)[2]
    for cve in er["cves"]:
        cve_url = os.path.join(nvd_base_url, cve["cve"])
        # Get all VCCs of the CVE
        vcc_hashes = dict.fromkeys([vcc["hash"] for fix in cve["fixes"] for vcc in fix["vccs"]])
        for vcc in vcc_hashes:
            cve_vcc_pairs.append({
                "orgName": org_name,
                "projectName": project_name,
                "cve": cve["cve"],
                "vccHash": vcc,
                "cveUrl": cve_url,
                "vccUrl": os.path.join(repo_url, "commit", vcc),
            })
df_cve_vcc_pairs_population = pd.DataFrame(cve_vcc_pairs, columns=cve_vcc_pairs[0].keys())
df_cve_vcc_pairs_population.to_csv(cve_vcc_pairs_population_filepath, index=False)

# Make Sample for the Validation. Size: 376. Reproduction Seed: 1
df_cve_vcc_pairs_sample = df_cve_vcc_pairs_population.sample(n=376, random_state=1)
df_cve_vcc_pairs_sample.to_csv(cve_vcc_pairs_sample_filepath, index=False)

# Make Population for RQ4
fix_cve_pairs = []
for er in enriched_repos:
    repo_url = er["repo"]
    org_name = repo_url.rsplit('/', 2)[1]
    project_name = repo_url.rsplit('/', 2)[2]
    for cve in er["cves"]:
        cve_url = os.path.join(nvd_base_url, cve["cve"])
        for fix in cve["fixes"]:
            fix_cve_pairs.append({
                "orgName": org_name,
                "projectName": project_name,
                "fixHash": fix["hash"],
                "cve": cve["cve"],
                "fixUrl": os.path.join(repo_url, "commit", fix["hash"]),
                "cveUrl": cve_url,
            })
df_fix_cve_pairs_population = pd.DataFrame(fix_cve_pairs, columns=fix_cve_pairs[0].keys())
df_fix_cve_pairs_population.to_csv(fix_cve_pairs_population_filepath, index=False)

# Make Sample for RQ4. Size: 351. Reproduction Seed: 1
df_fix_cve_pairs_sample = df_fix_cve_pairs_population.sample(n=351, random_state=1)
df_fix_cve_pairs_sample.to_csv(fix_cve_pairs_sample_filepath, index=False)
