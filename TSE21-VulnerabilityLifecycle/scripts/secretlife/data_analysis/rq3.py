import os
import sys

import matplotlib.pyplot as plt
import pandas as pd
from lifelines import KaplanMeierFitter
from matplotlib.pyplot import cm
from scipy.stats import spearmanr

sys.path.insert(0, "../common")
from utils import show_boxplots


if len(sys.argv) < 2:
    print("Need to specify the directory containing the input data. Exiting.")
    sys.exit(1)
input_dir = sys.argv[1] # e.g., ../../../data/
if len(sys.argv) < 3:
    print("Need to specify the directory containing the output data. Exiting.")
    sys.exit(1)
output_dir = sys.argv[2] # e.g., ../../../results/

input_filepath = os.path.join(input_dir, "rq3_input.csv")
top_25_filepath = os.path.join(input_dir, "top25cwe.csv")
output_filepath = os.path.join(output_dir, "rq3/output.txt")

cves_overall_filepath = os.path.join(output_dir, "rq3/cves_overall.csv")
days_cwe_boxplots_filepath = os.path.join(output_dir, "rq3/cwes/boxplots/days_cwe_{}.pdf")
changes_cwe_boxplots_filepath = os.path.join(output_dir, "rq3/cwes/boxplots/changes_cwe_{}.pdf")

days_top_10_cwe_survival_filepath = os.path.join(output_dir, "rq3/cwes/survival/days_top_10_cwe.pdf")
changes_top_10_cwe_survival_filepath = os.path.join(output_dir, "rq3/cwes/survival/changes_top_10_cwe.pdf")
days_top_25_cwe_survival_filepath = os.path.join(output_dir, "rq3/cwes/survival/days_top_25_cwe.pdf")
changes_top_25_cwe_survival_filepath = os.path.join(output_dir, "rq3/cwes/survival/changes_top_25_cwe.pdf")

days_language_survival_filepath = os.path.join(output_dir, "rq3/languages/survival/days_language.pdf")
changes_language_survival_filepath = os.path.join(output_dir, "rq3/languages/survival/changes_language.pdf")

days_max_project_survival_filepath = os.path.join(output_dir, "rq3/projects/survival/days_max_project.pdf")
changes_max_project_survival_filepath = os.path.join(output_dir, "rq3/projects/survival/changes_max_project.pdf")

df_cves = pd.read_csv(input_filepath, delimiter=",", keep_default_na=False)
top_25 = pd.read_csv(top_25_filepath)[["cwe", "position"]]
top_10 = top_25.head(10)
df_cves_top_25 = df_cves[df_cves["cwe"].isin(top_25["cwe"])] \
    .merge(top_25, how="left", on="cwe") \
    .sort_values("position", ignore_index=True) \
    .drop(columns=["position"])
df_cves_top_10 = df_cves[df_cves["cwe"].isin(top_10["cwe"])] \
    .merge(top_10, how="left", on="cwe") \
    .sort_values("position", ignore_index=True) \
    .drop(columns=["position"])


def show_survival(df, column, label, out_file, group_by=None, order=None, log=False):
    _, axes = plt.subplots()
    axes.set_prop_cycle(color=cm.get_cmap("Set1").colors)
    model = KaplanMeierFitter().fit(df[column])
    model_median = model.median_survival_time_
    model.plot(ci_show=False, ax=axes, linewidth=2.8, label="Overall")
    if group_by:
        # If there is not order, use a default one
        if not order:
            order = df[group_by].drop_duplicates().tolist()
        for col in order:
            group_df = df[df[group_by] == col]
            if len(group_df) < 10:
                print(f"* Skipping {col}: too few data")
                continue
            model = KaplanMeierFitter().fit(group_df[column])
            model.plot(ci_show=False, ax=axes, linewidth=1.3, label=col)
        size = 7 if len(axes.get_lines()) < 20 else 6
        plt.legend(loc="upper right", ncol=2, shadow=True, prop={"size":size})
    plt.ylabel("Survival Probability")
    plt.xlabel(f"Number of {label}")
    plt.ylim(0, None)
    plt.xlim(0, None)
    if log:
        plt.xlabel(f"Number of {label} (Log Scale)")
        plt.xscale("log")
        plt.xlim(1, None)
    plt.vlines(model_median, 0, 0.5, linestyle="dashed", colors=["gray"], linewidth=1, zorder=19)
    plt.hlines(0.5, 0, model_median, linestyle="dashed", colors=["gray"], linewidth=1, zorder=19)
    plt.scatter(model_median, 0.5, s=12, color="black", zorder=20)
    plt.yticks(list(plt.yticks()[0]) + [0.5])
    plt.ylim(0, 1.02)
    plt.savefig(out_file, bbox_inches="tight")

# General Profiling
num_repos = df_cves["repo"].nunique()
num_cves = len(df_cves)

# (Overall) Summary
df_merged_summary = df_cves[["days_before_last_fix", "changes_before_last_fix"]].describe().to_csv(cves_overall_filepath)

# (Overall) Max Outliers
max_days = df_cves.loc[df_cves["days_before_last_fix"].idxmax()]
max_changes = df_cves.loc[df_cves["changes_before_last_fix"].idxmax()]

# (Per CWEs) Boxplots
show_boxplots(df_cves_top_25, "cwe", "days_before_last_fix", "Days Before Last Fix", days_cwe_boxplots_filepath, log=True)
show_boxplots(df_cves_top_25, "cwe", "changes_before_last_fix", "changes Before Last Fix", changes_cwe_boxplots_filepath, log=True)

top_10_cwe_order = top_10["cwe"].tolist()
top_25_cwe_order = top_25["cwe"].tolist()
language_order = df_cves.groupby("language", sort=False).size().sort_values(ascending=False).index.tolist()

# (Per Top 10/25 CWEs) Survival Analysis
show_survival(df_cves, "days_before_last_fix", "Days", days_top_10_cwe_survival_filepath, group_by="cwe", order=top_10_cwe_order, log=True)
show_survival(df_cves, "changes_before_last_fix", "Changes", changes_top_10_cwe_survival_filepath, group_by="cwe", order=top_10_cwe_order, log=True)

show_survival(df_cves, "days_before_last_fix", "Days", days_top_25_cwe_survival_filepath, group_by="cwe", order=top_25_cwe_order, log=True)
show_survival(df_cves, "changes_before_last_fix", "Changes", changes_top_25_cwe_survival_filepath, group_by="cwe", order=top_25_cwe_order, log=True)

# (Per Language) Survival Analysis
show_survival(df_cves, "days_before_last_fix", "Days", days_language_survival_filepath, group_by="language", order=language_order, log=True)
show_survival(df_cves, "changes_before_last_fix", "Changes", changes_language_survival_filepath, group_by="language", order=language_order, log=True)

# (Max Project) Survival Analysis
max_repo = df_cves.groupby("repo").size().idxmax()
df_cves_max = df_cves.loc[df_cves["repo"] == max_repo]
show_survival(df_cves_max, "days_before_last_fix", "Days", days_max_project_survival_filepath, log=True)
show_survival(df_cves_max, "changes_before_last_fix", "Changes", changes_max_project_survival_filepath, log=True)

## CVE Analysis: Average Tenures vs. CVSS Severity
corr_days_stars, pvalue_days_stars = spearmanr(df_cves["days_before_last_fix"], df_cves["stars"])
corr_changes_stars, pvalue_changes_stars = spearmanr(df_cves["changes_before_last_fix"], df_cves["stars"])

with open(output_filepath, "w") as output_file:
    print(f"RQ3 Context:", file=output_file)
    print(f"* CVEs: {num_cves}", file=output_file)
    print(f"* Repos: {num_repos}", file=output_file)
    print(file=output_file)
    print(f"RQ3 Main Results:", file=output_file)
    print(f"* {max_days.cve} took the largest number of days to fix: {max_days.days_before_last_fix}", file=output_file)
    print(f"  -> It also took {max_days.changes_before_last_fix} changes", file=output_file)
    print(f"* {max_changes.cve} required the largest number of changes to fix: {max_changes.changes_before_last_fix}", file=output_file)
    print(f"  -> It also took {max_changes.days_before_last_fix} days", file=output_file)
    print(f"* Vulnerable Period (Days) vs. N° Stars - Spearman's Rho: {corr_days_stars} (p={pvalue_days_stars})", file=output_file)
    if pvalue_days_stars <= 0.05:
        print(f"  -> Significant Correlation: Rho^2 = {corr_days_stars ** 2}", file=output_file)
    else:
        print("  -> No Significant Correlation", file=output_file)
    print(f"* Vulnerable Period (changes) vs. N° Stars - Spearman's Rho: {corr_changes_stars} (p={pvalue_changes_stars})", file=output_file)
    if pvalue_changes_stars <= 0.05:
        print(f"  -> Significant Correlation: Rho^2 = {corr_changes_stars ** 2}", file=output_file)
    else:
        print("  -> No Significant Correlation", file=output_file)
